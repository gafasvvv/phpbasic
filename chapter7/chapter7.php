<?php

    /*オブジェクト指向
    　クラス（オブジェクト）とは、データを操作するための様々な機能（関数）を備えた高機能な器（変数）
    　変数は、データの入れ物であり、関数はデータを操作詞たり加工したり演算するための道具！！！
    　クラスを利用することで、関係するデータ（変数）とデータを操作するための手続き（関数）とをひとまとめに管理できる！！！
    　これは素晴らしい！！！
    　クラスとオブジェクトは別物で、クラスは設計図や金型であり、オブジェクトは設計図や金型で作られた実際のもののこと
    　ポイント・・・
    　同一のクラスは一つしかないが、そのクラスを元に作られたオブジェクトは多数できる可能性がある！（なるほど！！！）

    　インスタンス化とは、クラスをもとにしてコピーを作る作業のことで、それによってできる複製のことをインスタンス（オブジェクト）と呼ぶ

    　クラスに属する関数と変数のことをメソッドとオブジェクトと呼ぶ

    　例外的にオブジェクトを生成せずに呼び出せるものをクラスプロパティやクラスメソッドと呼ぶ

    　オブジェクト経由で呼び出すプロパティやメソッドのことをインスタンスプロパティやインスタンスメソッドと呼ぶ
    */

    // DateTimeクラス
    $now = new DateTime();
    //formatメソッド・・・日付や時刻値を整形するメソッド
    print $now->format('Y年m月d日 H:i:s');//2019年03月16日 15:04:36

    //DateTimeZoneクラス
    $date = new DateTime(null, new DateTimeZone('Asia/Tokyo'));//第１引数は省略不可　現在の時刻ならnull
    print $date->format('Y年m月d日 H:i:s');//2019年03月17日 00:04:36

    //createFromFormat・・・日付と時刻文字列の解析するメソッド
    $ftm = 'Y年m月d日';
    $time = '2016年12月04日';
    $dt = DateTime::createFromFormat($ftm, $time);
    print $dt->format('Y/m/d');//2016/12/04

    //DirectoryIteratorクラス
    //指定されたディレクトリ配下のファイル情報にアクセスするためのクラス
    $dir = new DirectoryIterator('./');
    foreach($dir as $file){
        if($file->isFile()){
            print mb_convert_encoding($file->getFilename(), 'UTF-8', 'SJIS-WIN').'<br />';
        }
    }
    //結果: chapter7.php

    /*
    　パッケージ管理ツールcomposer
    　利点・・・
    　1.インストール/アンインストールをコマンド一つで実行できること
    　2.アプリケーションごとにパッケージ管理ができること
    　3.ライブラリの自動ローディング機能を利用できること
    　4.対応するライブラリが豊富であること
    */

    /*
    　 テンプレートエンジンとは、スクリプトから受け取った値とレイアウトイメージ（テンプレート）とを結び付け、
    　 動的にページを生成する実行エンジンのこと　例: Smarty Bladeなど
    　 プログラム側で表示に必要なデータを用意しておき、テンプレート側ではデータを埋め込む場所や表示方法だけを定義するという役割分担が基本！
    */
    
?>
